###服务启动端口号
server:
  port: 2000
###服务名称(服务注册到eureka名称)  
spring:
    application:
        name: service-zuul
###服务注册到eureka地址
eureka:
  client:
    service-url:
           defaultZone: http://localhost:10000/eureka/
       
  #自己是服务，需要注册至服务注册中心上
    register-with-eureka: true
  #如果需要通信，必须运行此服务可以拉去别的服务的注册信息
    fetch-registry: true
    
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}
    #Eureka客户端向服务端发送心跳的时间间隔，单位为秒（客户端告诉服务端自己会按照该规则），默认30
    lease-renewal-interval-in-seconds: 5
    #Eureka服务端在收到最后一次心跳之后等待的时间上限，单位为秒，超过则剔除（客户端告诉服务端按照此规则等待自己），默认90
    lease-expiration-duration-in-seconds: 7
    
## Zuul网关的配置
zuul: 
  prefix: /api #增加接口前缀
  strip-prefix: true #代理前缀是否在请求转发前从请求上删除前缀(默认开启)
  #ignored-services: user-test  ## 忽略指定的微服务
  #ignored-services: "*" ##忽略全部微服务
  ignoredPatterns: /**/user/**  ## 忽略所有包含  /user/ 的请求
  routes: ## 配置别名替代
    api-product:  ## 这里只是一个代号，做不同的服务区分(如果存在多个服务需要配置，可以继续在zuul.routes节点下增加其他的名称)
      path: /product/** ## url对应的映射，相当于将请求 /product/** 映射到 http://localhost:8000/**(不过存在弊端：不会作为HystrixCommand执行，也不能使用ribbon来负载多个URL)
      service-id: app-bunana-product
    api-product2: ##只是个代号
      path: /test/**
      url: forward:/testforward  ##我们这里为了测试将 /**/test/ 的请求，转发到 /testforward 上
#ribbon:
#  eureka:
#    enabled: false    # 禁用掉ribbon的eureka使用
#app-bunana-product: 
#  ribbon:   #负载均衡配置
#    listOfServers: http://localhost:10011/,http://localhost:10010/
      
#    app-bunana-product: /product/**  
#    app-bunana-product: ##第二种配置方式
#      path: /product/** 
#      serviceId: app-bunana-product
    